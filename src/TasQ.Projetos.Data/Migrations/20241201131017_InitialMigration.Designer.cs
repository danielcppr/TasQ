// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TasQ.Projetos.Data;

#nullable disable

namespace TasQ.Projetos.Data.Migrations
{
    [DbContext(typeof(ProjetoDbContext))]
    [Migration("20241201131017_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TasQ.Projetos.Domain.HistoricoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("excluido_em");

                    b.Property<Guid>("TarefaId")
                        .HasColumnType("uuid")
                        .HasColumnName("tarefa_id");

                    b.HasKey("Id")
                        .HasName("pk_historico_tarefa");

                    b.HasIndex("TarefaId")
                        .HasDatabaseName("ix_historico_tarefa_tarefa_id");

                    b.ToTable("historico_tarefa", (string)null);
                });

            modelBuilder.Entity("TasQ.Projetos.Domain.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descricao");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("excluido_em");

                    b.Property<bool>("IsFinalizado")
                        .HasColumnType("boolean")
                        .HasColumnName("is_finalizado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<DateTime?>("PrazoFinalizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("prazo_finalizacao");

                    b.HasKey("Id")
                        .HasName("pk_projetos");

                    b.ToTable("projetos", (string)null);
                });

            modelBuilder.Entity("TasQ.Projetos.Domain.Tarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_vencimento");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descricao");

                    b.Property<DateTime?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("excluido_em");

                    b.Property<Guid>("ProjetoId")
                        .HasColumnType("uuid")
                        .HasColumnName("projeto_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("titulo");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_tarefas");

                    b.HasIndex("ProjetoId")
                        .HasDatabaseName("ix_tarefas_projeto_id");

                    b.ToTable("tarefas", (string)null);
                });

            modelBuilder.Entity("TasQ.Projetos.Domain.HistoricoTarefa", b =>
                {
                    b.HasOne("TasQ.Projetos.Domain.Tarefa", "Tarefa")
                        .WithMany("Historico")
                        .HasForeignKey("TarefaId")
                        .IsRequired()
                        .HasConstraintName("fk_historico_tarefa_tarefas_tarefa_id");

                    b.OwnsOne("TasQ.Projetos.Domain.HistoricoItem", "HistoricoItem", b1 =>
                        {
                            b1.Property<Guid>("HistoricoTarefaId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CampoAtualizado")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("CampoAtualizado");

                            b1.Property<string>("ValorAnterior")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ValorAnterior");

                            b1.Property<string>("ValorNovo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ValorNovo");

                            b1.HasKey("HistoricoTarefaId");

                            b1.ToTable("historico_tarefa");

                            b1.WithOwner()
                                .HasForeignKey("HistoricoTarefaId")
                                .HasConstraintName("fk_historico_tarefa_historico_tarefa_id");
                        });

                    b.Navigation("HistoricoItem")
                        .IsRequired();

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("TasQ.Projetos.Domain.Projeto", b =>
                {
                    b.OwnsMany("TasQ.Projetos.Domain.UsuarioProjeto", "UsuariosProjetos", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("usuario_id");

                            b1.Property<Guid>("ProjetoId")
                                .HasColumnType("uuid")
                                .HasColumnName("projeto_id");

                            b1.HasKey("UsuarioId", "ProjetoId")
                                .HasName("pk_usuario_projeto");

                            b1.HasIndex("ProjetoId")
                                .HasDatabaseName("ix_usuario_projeto_projeto_id");

                            b1.ToTable("usuario_projeto", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProjetoId")
                                .HasConstraintName("fk_usuario_projeto_projetos_projeto_id");
                        });

                    b.Navigation("UsuariosProjetos");
                });

            modelBuilder.Entity("TasQ.Projetos.Domain.Tarefa", b =>
                {
                    b.HasOne("TasQ.Projetos.Domain.Projeto", "Projeto")
                        .WithMany("Tarefas")
                        .HasForeignKey("ProjetoId")
                        .IsRequired()
                        .HasConstraintName("fk_tarefas_projetos_projeto_id");

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("TasQ.Projetos.Domain.Projeto", b =>
                {
                    b.Navigation("Tarefas");
                });

            modelBuilder.Entity("TasQ.Projetos.Domain.Tarefa", b =>
                {
                    b.Navigation("Historico");
                });
#pragma warning restore 612, 618
        }
    }
}
